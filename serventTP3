#!/usr/bin/python

import sys
import socket
import struct

# Campo
CLIREQ = 1
QUERY = 2
TTL = 3
RESPONSE = 3

# Recebendo porta
PORT = int(sys.argv[1])

# Arquivo
arquivo = sys.argv[2]

# Contador
contMSG = 0

# IP e porta 
UDP_IP = socket.gethostbyname(socket.gethostname())
UDP_PORT = PORT

# Socket UDP
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))

# Arrays
dicionario = []
arrayVizinhos = []
mensagensLidas = []

# Vizinhos 
vizinhos = sys.argv[3:]
for i in vizinhos:
  arrayVizinhos.append(i)

# Criando o dicionario
chaves = open(arquivo,'r') 
for line in chaves: 
  if not line.startswith("#"):
    dicionario.append(line.strip('\n'))

# Variavel que confirma se achou a chave
achouChave = 0

# Aguardando mensagens
while True:
  data, addr = sock.recvfrom(1024) 
  dados = struct.unpack('>H', data[0:2])[0]
  if dados == CLIREQ:
    # Conferir se a chave esta no dicionario proprio
    ipCliente = addr[0]
    portaCliente = addr[1]
    chave = data[2:]
    response = ''
    for i in dicionario:
      chaveDicionario = i.split()[0]
      # Se encontrar a chave no dicionario
      if chave == chaveDicionario:
        achouChave = 1
 	response = struct.pack('>H', RESPONSE) + ' '.join(i.split())
    # Envia para o client
    if achouChave == 1:
      sock.sendto(response, (ipCliente,portaCliente))      
    # Senao, montar QUERY
    if achouChave == 0:
      contMSG = contMSG + 1
      tratarIP = socket.inet_aton(addr[0])
      contador = struct.pack('>I', contMSG)
      portaString = struct.pack('>H', int(addr[1]))
      query = struct.pack('>H', QUERY) + struct.pack('>H', TTL) + tratarIP + portaString + contador + data[2:]
      # Envia para todos os vizinhos
      for i in arrayVizinhos:
        ipVizinho = i.split(':')[0]
        portaVizinho = int(i.split(':')[1])
        sock.sendto(query, (ipVizinho,portaVizinho))
  if dados == QUERY:
    # Adicionando a mensagem a array de Mensagens
    ipCliente = socket.inet_ntoa(data[4:8])
    portaCliente = struct.unpack('>H', data[8:10])[0]
    sequenciaCliente = struct.unpack('>H', data[10:12])[0]
    chave = data[14:]
    mensagem = ipCliente + str(portaCliente) + str(sequenciaCliente) + chave
    if mensagem not in mensagensLidas:
      # Adiciona a mensagem as mensagens lidas afim de evitar repeticoes
      mensagensLidas.append(mensagem) 
      response = ''
      # E confere se a chave esta no seu dicionario local
      for i in dicionario:
        chaveDicionario = i.split()[0]
        # Se encontrar a chave no dicionario
        if chave == chaveDicionario:
          achouChave = 1
 	  response = struct.pack('>H', RESPONSE) + ' '.join(i.split())
      # Envia para o client
      if achouChave == 1:
        sock.sendto(response, (ipCliente,portaCliente))
    # Se repetida, reenvia para os vizinhos apenas se o TTL for maior que zero
    else:
      novoTTL = int(struct.unpack('>H', data[2:4])[0])
      novoTTL = novoTTL - 1
      if novoTTL > 0:
	novaMensagem = data[0:2] + struct.pack('>H', novoTTL) + data[4:]
	for i in arrayVizinhos:
	  ipVizinho = i.split(':')[0]
          portaVizinho = int(i.split(':')[1])
	  # Nao pode enviar para quem o enviou a mensagem
	  if ipVizinho != addr[0] or portaVizinho != addr[1]:
	    sock.sendto(novaMensagem, (ipVizinho,portaVizinho))
  
